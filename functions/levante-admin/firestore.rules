rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // ============ CORE AUTH FUNCTIONS ============
    // Basic authentication check
    function isAuthed() {
      return request.auth != null;
    }

    // Get the user ID from the auth token
    function getUid() {
      return request.auth.uid;
    }

    // Check if user should use new permission system
    function shouldUseNewPermissions() {
      return isAuthed() &&
             request.auth.token.get('useNewPermissions', false) == true;
    }

    // ============ LEGACY SYSTEM (from userClaims document) ============
    // Fetch user claims from the userClaims collection
    function getUserClaims() {
      return get(/databases/$(database)/documents/userClaims/$(request.auth.uid)).data.get("claims", {});
    }

    // Legacy: Check if user is a super_admin or admin
    function isSuperAdminOrAdminLegacy() {
      let claims = getUserClaims();
      return claims.get("super_admin", false) || claims.get("admin", false);
    }

    // Legacy: Get admin orgs from userClaims
    function getAdminOrgs() {
      return getUserClaims().get('adminOrgs', {});
    }

    // Legacy: Check if user is admin for specific org IDs
    function isAdminForOrgType(orgType, orgIds) {
      return orgIds.size() > 0 && getAdminOrgs().get(orgType, []).hasAny(orgIds);
    }

    // Legacy: Check if user is admin for any organization
    function isAdminForAnyOrgType(orgData) {
      return isAdminForOrgType('districts', orgData.get('districts', []))
        || isAdminForOrgType('schools', orgData.get('schools', []))
        || isAdminForOrgType('classes', orgData.get('classes', []))
        || isAdminForOrgType('groups', orgData.get('groups', []))
    }

    // ============ NEW PERMISSION SYSTEM (from auth token) ============
    // Get user's roles from auth token
    function getUserRolesFromAuth() {
      return request.auth.token.get('roles', []);
    }

    // Get the system permissions document
    function getSystemPermissions() {
      return get(/databases/$(database)/documents/system/permissions).data.get('permissions', {});
    }

    function roleHasAction(roleName, resource, action) {
      let permissions = getSystemPermissions();
      let rolePerms = permissions.get(roleName, {});
      let resourcePerms = rolePerms.get(resource, []);
      return resourcePerms.hasAny([action]);
    }

    function roleHasGroupAction(roleName, groupType, action) {
      let permissions = getSystemPermissions();
      let rolePerms = permissions.get(roleName, {});
      let groupsPerms = rolePerms.get('groups', {});
      let groupTypePerms = groupsPerms.get(groupType, []);
      return groupTypePerms.hasAny([action]);
    }

    function roleHasAdminAction(roleName, adminRole, action) {
      let permissions = getSystemPermissions();
      let rolePerms = permissions.get(roleName, {});
      let adminsPerms = rolePerms.get('admins', {});
      let adminRolePerms = adminsPerms.get(adminRole, []);
      return adminRolePerms.hasAny([action]);
    }

    // New: Check if user has a specific role (roles stored as objects)
    function hasRole(role) {
      return getUserRolesFromAuth().where(roleEntry, roleEntry.role == role).size() > 0;
    }

    function hasRoleForSite(role, siteId) {
      return getUserRolesFromAuth()
        .where(roleEntry, roleEntry.role == role && roleEntry.siteId == siteId)
        .size() > 0;
    }

    // New: Get the highest role for a user
    function getHighestRole() {
      let roles = getUserRolesFromAuth();
      return roles.size() == 0 ? 'participant' :
             hasRole('super_admin') ? 'super_admin' :
             hasRole('site_admin') ? 'site_admin' :
             hasRole('admin') ? 'admin' :
             hasRole('research_assistant') ? 'research_assistant' : 'participant';
    }

    // New: Check if user has permission for a specific action
    function hasPermission(resource, action) {
      return roleHasAction(getHighestRole(), resource, action);
    }

    function hasSitePermissionForSiteIds(siteIds, resource, action) {
      return hasRole('super_admin')
        || siteIds.where(siteId,
            (roleHasAction('site_admin', resource, action) && hasRoleForSite('site_admin', siteId))
            || (roleHasAction('admin', resource, action) && hasRoleForSite('admin', siteId))
            || (roleHasAction('research_assistant', resource, action) && hasRoleForSite('research_assistant', siteId))
          ).size() > 0;
    }

    function hasSiteGroupPermissionForSiteIds(siteIds, groupType, action) {
      return hasRole('super_admin')
        || siteIds.where(siteId,
            (roleHasGroupAction('site_admin', groupType, action) && hasRoleForSite('site_admin', siteId))
            || (roleHasGroupAction('admin', groupType, action) && hasRoleForSite('admin', siteId))
            || (roleHasGroupAction('research_assistant', groupType, action) && hasRoleForSite('research_assistant', siteId))
          ).size() > 0;
    }

    function hasSiteAdminPermissionForSiteIds(siteIds, adminRole, action) {
      return hasRole('super_admin')
        || siteIds.where(siteId,
            (roleHasAdminAction('site_admin', adminRole, action) && hasRoleForSite('site_admin', siteId))
            || (roleHasAdminAction('admin', adminRole, action) && hasRoleForSite('admin', siteId))
            || (roleHasAdminAction('research_assistant', adminRole, action) && hasRoleForSite('research_assistant', siteId))
          ).size() > 0;
    }

    function hasAdminPermission(permissionResource, action, targetSites) {
        return shouldUseNewPermissions()
          ? (
              getTargetUserSites().size() > 0
              && hasSitePermissionForSiteIds(
                   targetSites,
                   permissionResource,
                   action
                 )
            )
          : isAdminForAnyOrgType({
              'districts': resource.data.get(['districts', 'current'], []),
              'schools' : resource.data.get(['schools',  'current'], []),
              'classes' : resource.data.get(['classes',  'current'], []),
              'groups'  : resource.data.get(['groups',   'current'], [])
            });
    }

    // New: Check if user is super_admin or site_admin
    function isSuperAdminOrAdminNew() {
      return hasRole('super_admin') || hasRole('site_admin');
    }

    // ============ UNIFIED PERMISSION CHECK ============
    // Main function that routes to new or legacy system based on flag
    function isSuperAdminOrAdmin() {
      return shouldUseNewPermissions() ?
        isSuperAdminOrAdminNew() :
        isSuperAdminOrAdminLegacy();
    }

    // Super admins and admins (for now) can access everything
    match /{document=**} {
      allow read, write: if isSuperAdminOrAdmin();
    }

    // ============ KEY VALIDATION FUNCTIONS ============
    function keysNotUpdated(keys) {
      return !request.resource.data.diff(resource.data).affectedKeys().hasAny(keys);
    }

    function onlyTheseKeysUpdated(keys) {
      return request.resource.data.diff(resource.data).affectedKeys().hasOnly(keys);
    }

    // ============ USER CLAIMS ============
    match /userClaims/{uid} {
      allow read: if isAuthed() && uid == request.auth.uid;
    }

    // ============ SYSTEM PERMISSIONS ============
    match /system/permissions {
      allow read: if isAuthed();
    }

    // ============ LEGAL DOCS ============
    match /legal/{form} {
      allow read: if isAuthed();
    }

    // ============ USERS COLLECTION ============
    match /users/{uid} {
      function myData() {
        return uid == request.auth.uid;
      }

      function isParentOfUser() {
        let parentUser = get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
        return parentUser.userType == 'parent' && resource.data.parentIds.hasAny([request.auth.uid]);
      }

      function targetUserRoles() {
        return resource.data.get('roles', []);
      }

      function getTargetUserSites() {
        return resource.data.get(['districts', 'current'], []);
      }

      // Unified read permission check
      function canReadUser() {
          return (myData() || hasAdminPermission('users', 'read', getTargetUserSites()) || isParentOfUser());
      }

      allow read: if canReadUser();

      // Survey responses
      match /surveyResponses/{responseId} {
        allow read, write: if myData();
      }

      // Assignments
      match /assignments/{administrationId} {
        function canReadAssignment() {
          return isAuthed() && (myData() || hasAdminPermission('assignments', 'read', getTargetUserSites()));
        }

        allow read: if canReadAssignment();
      }

      // Runs
      match /runs/{runId} {
        function runAssigningSiteIds() {
          return resource.data.get('assigningOrgs', {}).get('districts', []);
        }

        function runReadSiteIds() {
          return resource.data.get('readOrgs', {}).get('districts', []);
        }

        function canReadRun() {
          return isAuthed() && (myData() || hasAdminPermission('users', 'read', getTargetUserSites()));
        }

        allow read: if canReadRun();
        allow create: if myData();
        allow update: if myData();

        match /trials/{trialId} {
          function canReadTrial() {
            return myData() || hasAdminPermission('users', 'read', getTargetUserSites());
          }

          allow read: if canReadTrial();
          allow write: if myData();
        }
      }
    }


    // ============ ADMINISTRATIONS ============
    match /administrations/{administrationId} {
      function canReadAdministration() {
        return isAuthed() && hasAdminPermission('assignments', 'read', resoure.data.siteId);
      }

      allow read: if canReadAdministration();

      match /stats/completion {
        allow read: if isAuthed() && hasAdminPermission('assignments', 'read', resoure.data.siteId);
      }
    }

    // ============ ORG COLLECTIONS (Legacy) ============
    function getUserOrgs(orgType) {
      return get(/databases/$(database)/documents/users/$(getUid())).data.get([orgType, 'current'], []);
    }

    // Districts (Sites)
    match /districts/{districtId} {
      function canReadDistrict() {
        return shouldUseNewPermissions() ?
          hasSiteGroupPermissionForSiteIds([districtId], 'sites', 'read') :
          isAdminForOrgType('districts', [districtId]);
      }

      allow read: if canReadDistrict();
    }

    // Schools
    match /schools/{schoolId} {
      function canReadSchool() {        
        return shouldUseNewPermissions() ?
          hasSiteGroupPermissionForSiteIds([resource.data.get('districtId', 'nullId')], 'schools', 'read') :
          (isAdminForOrgType('districts', [resource.data.get('districtId', 'nullId')]) || isAdminForOrgType('schools', [schoolId]));
      }

      allow read: if canReadSchool();
    }

    // Classes
    match /classes/{classId} {
      function canReadClass() {
        let legacyCheck = isAdminForOrgType('classes', [classId])
          || isAdminForOrgType('schools', [resource.data.get('schoolId', 'nullId')])
          || isAdminForOrgType('districts', [resource.data.get('districtId', 'nullId')]);
        
        return shouldUseNewPermissions() ?
          (hasSiteGroupPermissionForSiteIds([resource.data.get('districtId', 'nullId')], 'classes', 'read')) :
          legacyCheck;
      }

      allow read: if canReadClass();
    }

    // Groups (Cohorts)
    match /groups/{groupId} {
      function canReadGroup() {
        let legacyCheck = isAdminForOrgType('groups', [groupId]);

        return shouldUseNewPermissions() ?
          hasSiteGroupPermissionForSiteIds([resource.data.get('parentOrgId', 'nullId')], 'cohorts', 'read') :
          legacyCheck;
      }

      allow read: if canReadGroup();
    }

    // ============ GUESTS ============
    match /guests/{guestUid} {
      function isGuest() {
        return isAuthed() && request.auth.uid == guestUid;
      }

      allow read: if isGuest();
      allow create: if isGuest() && request.resource.data.get('userType', 'nullType') == 'guest';
      allow update: if isGuest() && keysNotUpdated(['userType']);
      allow delete: if false;

      match /runs/{runId} {
        allow create, update: if isGuest();

        match /trials/{trialId} {
          allow create, update: if isGuest();
        }
      }
    }

    // ============ TASKS ============
    match /tasks/{taskId} {
      function canUpdateTask() {
        let newParams = request.resource.data.get("params", {});
        let oldParams = resource.data.get("params", {});
        return isAuthed()
          && keysNotUpdated(['registered'])
          && onlyTheseKeysUpdated(['description', 'lastUpdated', 'params', "createdAt", "updatedAt"])
          && newParams.diff(oldParams).addedKeys().size() == 0
          && newParams.diff(oldParams).removedKeys().size() == 0;
      }

      function canReadTask() {
        return shouldUseNewPermissions() ?
          (isAuthed() && hasPermission('tasks', 'read')) :
          isAuthed();
      }

      function canCreateTask() {
        let baseCheck = isAuthed() && !request.resource.data.keys().hasAny(['registered']);

        return shouldUseNewPermissions() ?
          (baseCheck && hasPermission('tasks', 'create')) :
          baseCheck;
      }

      function canUpdateTaskWithPermission() {
        return shouldUseNewPermissions() ?
          (canUpdateTask() && hasPermission('tasks', 'update')) :
          canUpdateTask();
      }

      allow read: if canReadTask();
      allow create: if canCreateTask();
      allow update: if canUpdateTaskWithPermission();

      match /variants/{variantId} {
        allow read: if canReadTask();
        allow create: if canCreateTask();
        allow update: if canUpdateTaskWithPermission();
      }
    }
  }
}
