rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // ============ CORE AUTH FUNCTIONS ============
    // Basic authentication check
    function loggedIn() {
      return request.auth != null;
    }

    // Get the user ID from the auth token
    function getUid() {
      return request.auth.uid;
    }

    // Check if user should use new permission system
    function shouldUseNewPermissions() {
      return request.auth != null &&
             request.auth.token.get('useNewPermissions', false) == true;
    }

    // ============ LEGACY SYSTEM (from userClaims document) ============
    // Fetch user claims from the userClaims collection
    function getUserClaims() {
      return get(/databases/$(database)/documents/userClaims/$(request.auth.uid)).data.get("claims", {});
    }

    // Legacy: Check if user is a super_admin or admin
    function isSuperAdminOrAdminLegacy() {
      let claims = getUserClaims();
      return claims.get("super_admin", false) || claims.get("admin", false);
    }

    // Legacy: Get admin orgs from userClaims
    function getAdminOrgs() {
      return getUserClaims().get('adminOrgs', {});
    }

    // Legacy: Check if user is admin for specific org IDs
    function isAdminForOrgType(orgType, orgIds) {
      return orgIds.size() > 0 && getAdminOrgs().get(orgType, []).hasAny(orgIds);
    }

    // Legacy: Check if user is admin for any organization
    function isAdminForAnyOrgType(orgData) {
      return isAdminForOrgType('districts', orgData.get('districts', []))
        || isAdminForOrgType('schools', orgData.get('schools', []))
        || isAdminForOrgType('classes', orgData.get('classes', []))
        || isAdminForOrgType('groups', orgData.get('groups', []))
    }

    // ============ NEW PERMISSION SYSTEM (from auth token) ============
    // Get user's roles from auth token
    function getUserRolesFromAuth() {
      return request.auth.token.get('roles', []);
    }

    // Get the system permissions document
    function getSystemPermissions() {
      return get(/databases/$(database)/documents/system/permissions).data.get('permissions', {});
    }

    function roleHasAction(roleName, resource, action) {
      let permissions = getSystemPermissions();
      let rolePerms = permissions.get(roleName, {});
      let resourcePerms = rolePerms.get(resource, []);
      return resourcePerms.hasAny([action]);
    }

    function roleHasGroupAction(roleName, groupType, action) {
      let permissions = getSystemPermissions();
      let rolePerms = permissions.get(roleName, {});
      let groupsPerms = rolePerms.get('groups', {});
      let groupTypePerms = groupsPerms.get(groupType, []);
      return groupTypePerms.hasAny([action]);
    }

    function roleHasAdminAction(roleName, adminRole, action) {
      let permissions = getSystemPermissions();
      let rolePerms = permissions.get(roleName, {});
      let adminsPerms = rolePerms.get('admins', {});
      let adminRolePerms = adminsPerms.get(adminRole, []);
      return adminRolePerms.hasAny([action]);
    }

    // New: Check if user has a specific role (roles stored as objects)
    function hasRole(role) {
      return getUserRolesFromAuth().where(roleEntry, roleEntry.role == role).size() > 0;
    }

    function hasRoleForSite(role, siteId) {
      return getUserRolesFromAuth()
        .where(roleEntry, roleEntry.role == role && roleEntry.siteId == siteId)
        .size() > 0;
    }

    // New: Get the highest role for a user
    function getHighestRole() {
      let roles = getUserRolesFromAuth();
      return roles.size() == 0 ? 'participant' :
             hasRole('super_admin') ? 'super_admin' :
             hasRole('site_admin') ? 'site_admin' :
             hasRole('admin') ? 'admin' :
             hasRole('research_assistant') ? 'research_assistant' : 'participant';
    }

    // New: Check if user has permission for a specific action (handles nested permissions)
    function hasPermission(resource, action) {
      return roleHasAction(getHighestRole(), resource, action);
    }

    // Check if user has permission for a nested group type (sites, schools, classes, cohorts)
    function hasGroupPermission(groupType, action) {
      return roleHasGroupAction(getHighestRole(), groupType, action);
    }

    function hasAnyGroupPermission(action) {
      return hasGroupPermission('sites', action)
        || hasGroupPermission('schools', action)
        || hasGroupPermission('classes', action)
        || hasGroupPermission('cohorts', action);
    }

    function hasAdminRolePermission(adminRole, action) {
      return roleHasAdminAction(getHighestRole(), adminRole, action);
    }

    function hasSitePermissionForSiteIds(siteIds, resource, action) {
      return (hasRole('super_admin') && roleHasAction('super_admin', resource, action))
        || siteIds.where(siteId,
            (roleHasAction('site_admin', resource, action) && hasRoleForSite('site_admin', siteId))
            || (roleHasAction('admin', resource, action) && hasRoleForSite('admin', siteId))
            || (roleHasAction('research_assistant', resource, action) && hasRoleForSite('research_assistant', siteId))
          ).size() > 0;
    }

    function hasSiteGroupPermissionForSiteIds(siteIds, groupType, action) {
      return (hasRole('super_admin') && roleHasGroupAction('super_admin', groupType, action))
        || siteIds.where(siteId,
            (roleHasGroupAction('site_admin', groupType, action) && hasRoleForSite('site_admin', siteId))
            || (roleHasGroupAction('admin', groupType, action) && hasRoleForSite('admin', siteId))
            || (roleHasGroupAction('research_assistant', groupType, action) && hasRoleForSite('research_assistant', siteId))
          ).size() > 0;
    }

    function hasSiteAdminPermissionForSiteIds(siteIds, adminRole, action) {
      return (hasRole('super_admin') && roleHasAdminAction('super_admin', adminRole, action))
        || siteIds.where(siteId,
            (roleHasAdminAction('site_admin', adminRole, action) && hasRoleForSite('site_admin', siteId))
            || (roleHasAdminAction('admin', adminRole, action) && hasRoleForSite('admin', siteId))
            || (roleHasAdminAction('research_assistant', adminRole, action) && hasRoleForSite('research_assistant', siteId))
          ).size() > 0;
    }

    // New: Check if user is super_admin or site_admin
    function isSuperAdminOrAdminNew() {
      return hasRole('super_admin') || hasRole('site_admin');
    }

    // ============ UNIFIED PERMISSION CHECK ============
    // Main function that routes to new or legacy system based on flag
    function isSuperAdminOrAdmin() {
      return shouldUseNewPermissions() ?
        isSuperAdminOrAdminNew() :
        isSuperAdminOrAdminLegacy();
    }

    // Super admins and admins can access everything
    match /{document=**} {
      allow read, write: if isSuperAdminOrAdmin();
    }

    // ============ KEY VALIDATION FUNCTIONS ============
    function keysNotUpdated(keys) {
      return !request.resource.data.diff(resource.data).affectedKeys().hasAny(keys);
    }

    function onlyTheseKeysUpdated(keys) {
      return request.resource.data.diff(resource.data).affectedKeys().hasOnly(keys);
    }

    // ============ USER CLAIMS ============
    match /userClaims/{uid} {
      allow read: if loggedIn() && uid == request.auth.uid;
      allow write: if false;
    }

    // ============ SYSTEM PERMISSIONS ============
    match /system/permissions {
      allow read: if loggedIn();
      allow write: if false;
    }

    // ============ LEGAL DOCS ============
    match /legal/{form} {
      allow read: if true;
      allow write: if false;
    }

    // ============ USERS COLLECTION ============
    match /users/{uid} {
      function myData() {
        return uid == request.auth.uid;
      }

      function isParentOfUser() {
        let parentUser = get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
        return parentUser.userType == 'parent' && resource.data.parentIds.hasAny([request.auth.uid]);
      }

      function targetUserRoles() {
        return resource.data.get('roles', []);
      }

      function targetUserDistricts() {
        return resource.data.get(['districts', 'current'], []);
      }

      function requestUserRoles() {
        return request.resource.data.get('roles', targetUserRoles());
      }

      function requestUserDistricts() {
        return request.resource.data.get(['districts', 'current'], targetUserDistricts());
      }

      function hasUsersPermissionForRoles(roleEntries, resourceName, action) {
        return roleEntries.size() > 0 &&
          roleEntries.where(roleEntry,
            hasSitePermissionForSiteIds([roleEntry.siteId], resourceName, action)
          ).size() == roleEntries.size();
      }

      function hasAdminRolePermissionForRoles(roleEntries, action) {
        return roleEntries.size() == 0 ||
          roleEntries.where(roleEntry,
            hasSiteAdminPermissionForSiteIds([roleEntry.siteId], roleEntry.role, action)
          ).size() == roleEntries.size();
      }

      function isUserAdmin() {
        if (shouldUseNewPermissions()) {
          let roleEntries = targetUserRoles();
          if (roleEntries.size() > 0) {
            return roleEntries.where(roleEntry,
              hasSitePermissionForSiteIds([roleEntry.siteId], 'users', 'read')
            ).size() > 0;
          }

          return hasSitePermissionForSiteIds(targetUserDistricts(), 'users', 'read');
        }

        return isAdminForAnyOrgType({
          'districts': resource.data.get(['districts', 'current'], []),
          'schools': resource.data.get(['schools', 'current'], []),
          'classes': resource.data.get(['classes', 'current'], []),
          'groups': resource.data.get(['groups', 'current'], [])
        });
      }

      // Unified read permission check
      function canReadUser() {
        return shouldUseNewPermissions() ?
          ((myData() || isParentOfUser()) || isUserAdmin()) :
          (myData() || isUserAdmin() || isParentOfUser());
      }

      allow read: if canReadUser();

      function hasValidOrgStructure() {
        let data = request.resource.data;
        return data.get(['districts', 'current'], []).size() <= 1
          && data.get(['schools', 'current'], []).size() <= 1;
      }

      function isValidAdminAction(orgType, allowedKeys) {
        return isAdminForOrgType(orgType, request.resource.data.get([orgType, 'current'], []))
          && request.resource.data.keys().hasOnly(allowedKeys);
      }

      // Unified create permission check
      function canCreateUser() {
        if (shouldUseNewPermissions()) {
          let allowedKeys = ['userType', 'name', 'assessmentPid', 'studentData', 'educatorData', 'caregiverData', 'adminData', 'districts', 'schools', 'classes', 'groups', 'assessmentUid', 'roles'];
          if (!(loggedIn() && hasValidOrgStructure() && request.resource.data.keys().hasOnly(allowedKeys))) {
            return false;
          }

          let roleEntries = requestUserRoles();
          if (roleEntries.size() > 0) {
            return hasUsersPermissionForRoles(roleEntries, 'users', 'create')
              && hasAdminRolePermissionForRoles(roleEntries, 'create');
          }

          return hasSitePermissionForSiteIds(requestUserDistricts(), 'users', 'create');
        }

        let baseCheck = loggedIn() && hasValidOrgStructure() && (
          isValidAdminAction('districts', ['userType', 'name', 'assessmentPid', 'studentData', 'educatorData', 'caregiverData', 'adminData',
'districts', 'schools', 'classes', 'assessmentUid'])
          || isValidAdminAction('schools', ['userType', 'name', 'assessmentPid', 'studentData', 'educatorData', 'caregiverData', 'adminData',
'districts', 'schools', 'classes', 'assessmentUid'])
          || isValidAdminAction('classes', ['userType', 'name', 'assessmentPid', 'studentData', 'educatorData', 'caregiverData', 'adminData',
'districts', 'schools', 'classes', 'assessmentUid'])
          || isValidAdminAction('groups', ['userType', 'name', 'assessmentPid', 'studentData', 'educatorData', 'caregiverData', 'adminData',
'groups', 'assessmentUid'])
        );

        return baseCheck;
      }

      allow create: if canCreateUser();

      // Unified update permission check
      function canUpdateUser() {
        if (shouldUseNewPermissions()) {
          if (!keysNotUpdated(['archived', 'assessmentUid'])) {
            return false;
          }
          if (myData()) {
            return true;
          }

          let roleEntries = requestUserRoles();
          let sitePermission =
            (roleEntries.size() > 0 && hasUsersPermissionForRoles(roleEntries, 'users', 'update')) ||
            (roleEntries.size() == 0 && hasSitePermissionForSiteIds(targetUserDistricts(), 'users', 'update'));

          if (!sitePermission) {
            return false;
          }

          return hasAdminRolePermissionForRoles(roleEntries, 'update');
        }

        let baseCheck = (myData() || isUserAdmin()) && keysNotUpdated(['archived', 'assessmentUid']);
        return baseCheck;
      }

      allow update: if canUpdateUser();

      // Unified delete permission check
      function canDeleteUser() {
        if (shouldUseNewPermissions()) {
          let roleEntries = targetUserRoles();
          if (roleEntries.size() > 0) {
            return hasUsersPermissionForRoles(roleEntries, 'users', 'delete')
              && hasAdminRolePermissionForRoles(roleEntries, 'delete');
          }

          return hasSitePermissionForSiteIds(targetUserDistricts(), 'users', 'delete');
        }

        return false;
      }

      allow delete: if canDeleteUser();

      // Survey responses
      match /surveyResponses/{responseId} {
        allow read, write: if myData();
      }

      // External data
      match /externalData/{externalDataId} {
        allow read: if loggedIn() && (myData() || isUserAdmin());
        allow write: if false;
      }

      // Assignments
      match /assignments/{administrationId} {
        function assignmentSiteIds() {
          return resource.data.get('assigningOrgs', {}).get('districts', []);
        }

        function canReadAssignment() {
          let baseCheck = loggedIn() && (myData() || isAdminForAnyOrgType(resource.data.get('assigningOrgs', {})));

          return shouldUseNewPermissions() ?
            (loggedIn() && (myData() || hasSitePermissionForSiteIds(assignmentSiteIds(), 'assignments', 'read'))) :
            baseCheck;
        }

        function canUpdateAssignment() {
          let baseCheck = myData() && keysNotUpdated(['assigningOrgs'])
            && request.resource.data.get('assessments', []).size() == resource.data.get('assessments', []).size();

          return shouldUseNewPermissions() ?
            (baseCheck && hasPermission('assignments', 'update')) :
            baseCheck;
        }

        allow read: if canReadAssignment();
        allow create: if false;
        allow update: if canUpdateAssignment();
      }

      // Runs
      match /runs/{runId} {
        function runAssigningSiteIds() {
          return resource.data.get('assigningOrgs', {}).get('districts', []);
        }

        function runReadSiteIds() {
          return resource.data.get('readOrgs', {}).get('districts', []);
        }

        function canReadRun() {
          if (shouldUseNewPermissions()) {
            return loggedIn() && (myData()
              || hasSitePermissionForSiteIds(runAssigningSiteIds(), 'assignments', 'read')
              || hasSitePermissionForSiteIds(runReadSiteIds(), 'assignments', 'read'));
          }

          return loggedIn() && (myData()
            || isAdminForAnyOrgType(resource.data.get('assigningOrgs', {}))
            || isAdminForAnyOrgType(resource.data.get('readOrgs', {})));
        }

        allow read: if canReadRun();
        allow create: if myData();
        allow update: if myData();

        match /trials/{trialId} {
          function canReadTrial() {
            let runData = get(/databases/$(database)/documents/users/$(uid)/runs/$(runId)).data;
            if (shouldUseNewPermissions()) {
              return loggedIn() && (myData()
                || hasSitePermissionForSiteIds(runData.get('assigningOrgs', {}).get('districts', []), 'assignments', 'read')
                || hasSitePermissionForSiteIds(runData.get('readOrgs', {}).get('districts', []), 'assignments', 'read'));
            }

            return loggedIn() && (myData()
              || isAdminForAnyOrgType(runData.get('assigningOrgs', {}))
              || isAdminForAnyOrgType(runData.get('readOrgs', {})));
          }

          allow read: if canReadTrial();
          allow write: if myData();
        }
      }
    }

    // ============ GROUP ASSIGNMENTS ============
    match /{path=**}/assignments/{assignmentId} {
      function canReadGroupAssignment() {
        let baseCheck = loggedIn() && isAdminForAnyOrgType(resource.data.get('assigningOrgs', {}));

        return shouldUseNewPermissions() ?
          (loggedIn() && hasSitePermissionForSiteIds(resource.data.get('assigningOrgs', {}).get('districts', []), 'assignments', 'read')) :
          baseCheck;
      }

      allow read: if canReadGroupAssignment();
    }

    // ============ ADMINISTRATIONS ============
    match /administrations/{administrationId} {
      function userAssignedToAdministration() {
        let userData = get(/databases/$(database)/documents/users/$(getUid())).data;
        return userData.get(['districts', 'current'], []).hasAny(resource.data.districts)
          || userData.get(['schools', 'current'], []).hasAny(resource.data.schools)
          || userData.get(['classes', 'current'], []).hasAny(resource.data.classes)
          || userData.get(['groups', 'current'], []).hasAny(resource.data.groups)
      }

      function userCreatedAdministration() {
        return getUid() == resource.data.get('createdBy', 'nullId');
      }

      function administrationSiteIds() {
        return resource.data.get('districts', []);
      }

      function requestAdministrationSiteIds() {
        return request.resource.data.get('districts', administrationSiteIds());
      }

      function canReadAdministration() {
        if (shouldUseNewPermissions()) {
          return loggedIn() && (userAssignedToAdministration() || userCreatedAdministration() || hasSitePermissionForSiteIds(administrationSiteIds(), 'assignments', 'read'));
        }

        let baseCheck = loggedIn() && (userAssignedToAdministration() || userCreatedAdministration() || isAdminForAnyOrgType(resource.data));
        return baseCheck;
      }

      function canCreateAdministration() {
        if (shouldUseNewPermissions()) {
          return loggedIn() && getUid() == request.resource.data.createdBy
            && hasSitePermissionForSiteIds(requestAdministrationSiteIds(), 'assignments', 'create');
        }

        let baseCheck = loggedIn() && getUid() == request.resource.data.createdBy && isAdminForAnyOrgType(request.resource.data);
        return baseCheck;
      }

      function canUpdateAdministration() {
        if (shouldUseNewPermissions()) {
          return loggedIn()
            && (userCreatedAdministration() || hasSitePermissionForSiteIds(administrationSiteIds(), 'assignments', 'update'))
            && keysNotUpdated(['createdBy']);
        }

        let baseCheck = loggedIn() && (userCreatedAdministration() || isAdminForAnyOrgType(resource.data)) && keysNotUpdated(['createdBy']);
        return baseCheck;
      }

      function canDeleteAdministration() {
        if (shouldUseNewPermissions()) {
          return hasSitePermissionForSiteIds(administrationSiteIds(), 'assignments', 'delete');
        }
        return false;
      }

      allow read: if canReadAdministration();
      allow create: if canCreateAdministration();
      allow update: if canUpdateAdministration();
      allow delete: if canDeleteAdministration();

      match /stats/completion {
        allow read: if loggedIn() && (userCreatedAdministration() ||
          (shouldUseNewPermissions()
            ? hasSitePermissionForSiteIds(get(/databases/$(database)/documents/administrations/$(administrationId)).data.get('districts', []), 'assignments', 'read')
            : isAdminForAnyOrgType(get(/databases/$(database)/documents/administrations/$(administrationId)).data)));
        allow write: if false;
      }
    }

    // ============ ORG COLLECTIONS ============
    function getUserOrgs(orgType) {
      return get(/databases/$(database)/documents/users/$(getUid())).data.get([orgType, 'current'], []);
    }

    // Districts (sites in new permission system)
    match /districts/{districtId} {
      function canReadDistrict() {
        let baseCheck = loggedIn() && (districtId in getUserOrgs('districts') || isAdminForOrgType('districts', [districtId]));
        
        return shouldUseNewPermissions() ?
          (loggedIn() && ((districtId in getUserOrgs('districts')) || hasSiteGroupPermissionForSiteIds([districtId], 'sites', 'read'))) :
          baseCheck;
      }

      function canWriteDistrict(action) {
        return shouldUseNewPermissions() ?
          hasSiteGroupPermissionForSiteIds([districtId], 'sites', action) :
          false;
      }

      allow read: if canReadDistrict();
      allow create: if canWriteDistrict('create');
      allow update: if canWriteDistrict('update');
      allow delete: if canWriteDistrict('delete');
    }

    // Schools
    match /schools/{schoolId} {
      function canReadSchool() {
        let baseCheck = schoolId in getUserOrgs('schools') || isAdminForOrgType('schools', [schoolId]) ||
          isAdminForOrgType('districts', [resource.data.get('districtId', 'nullId')]);
        
        return shouldUseNewPermissions() ?
          (loggedIn() && ((schoolId in getUserOrgs('schools')) ||
            hasSiteGroupPermissionForSiteIds([resource.data.get('districtId', 'nullId')], 'schools', 'read'))) :
          baseCheck;
      }

      function canCreateSchool() {
        let baseCheck = isAdminForOrgType('districts', [request.resource.data.get('districtId', 'nullId')]);
        
        return shouldUseNewPermissions() ?
          hasSiteGroupPermissionForSiteIds([request.resource.data.get('districtId', 'nullId')], 'schools', 'create') :
          baseCheck;
      }

      function canUpdateDeleteSchool(action) {
        let baseCheck = isAdminForOrgType('districts', [resource.data.get('districtId', 'nullId')]);
        
        return shouldUseNewPermissions() ?
          hasSiteGroupPermissionForSiteIds([resource.data.get('districtId', 'nullId')], 'schools', action) :
          baseCheck;
      }

      allow read: if canReadSchool();
      allow create: if canCreateSchool();
      allow update: if canUpdateDeleteSchool('update');
      allow delete: if canUpdateDeleteSchool('delete');
    }

    // Classes
    match /classes/{classId} {
      function canReadClass() {
        let baseCheck = classId in getUserOrgs('classes') || isAdminForOrgType('classes', [classId])
          || isAdminForOrgType('schools', [resource.data.get('schoolId', 'nullId')])
          || isAdminForOrgType('districts', [resource.data.get('districtId', 'nullId')]);
        
        return shouldUseNewPermissions() ?
          (loggedIn() && ((classId in getUserOrgs('classes')) ||
            hasSiteGroupPermissionForSiteIds([resource.data.get('districtId', 'nullId')], 'classes', 'read'))) :
          baseCheck;
      }

      function canCreateClass() {
        let baseCheck = isAdminForOrgType('districts', [request.resource.data.get('districtId', 'nullId')])
          || isAdminForOrgType('schools', [request.resource.data.get('schoolId', 'nullId')]);
        
        return shouldUseNewPermissions() ?
          hasSiteGroupPermissionForSiteIds([request.resource.data.get('districtId', 'nullId')], 'classes', 'create') :
          baseCheck;
      }

      function canUpdateDeleteClass(action) {
        let baseCheck = isAdminForOrgType('districts', [resource.data.get('districtId', 'nullId')])
          || isAdminForOrgType('schools', [resource.data.get('schoolId', 'nullId')]);
        
        return shouldUseNewPermissions() ?
          hasSiteGroupPermissionForSiteIds([resource.data.get('districtId', 'nullId')], 'classes', action) :
          baseCheck;
      }

      allow read: if canReadClass();
      allow create: if canCreateClass();
      allow update: if canUpdateDeleteClass('update');
      allow delete: if canUpdateDeleteClass('delete');
    }

    // Groups (cohorts in new permission system)
    match /groups/{groupId} {
      function canReadGroup() {
        let baseCheck = loggedIn() && (groupId in getUserOrgs('groups') || isAdminForOrgType('groups', [groupId]));

        return shouldUseNewPermissions() ?
          (loggedIn() && ((groupId in getUserOrgs('groups')) ||
            hasSiteGroupPermissionForSiteIds([resource.data.get('parentOrgId', 'nullId')], 'cohorts', 'read'))) :
          baseCheck;
      }

      function canWriteGroup(action) {
        let baseCheck = isAdminForOrgType('groups', [groupId]);

        return shouldUseNewPermissions() ?
          hasSiteGroupPermissionForSiteIds([(action == 'create' ? request.resource.data.get('parentOrgId', 'nullId') : resource.data.get('parentOrgId', 'nullId'))], 'cohorts', action) :
          baseCheck;
      }

      allow read: if canReadGroup();
      allow create: if canWriteGroup('create');
      allow update: if canWriteGroup('update');
      allow delete: if canWriteGroup('delete');
    }

    // ============ GUESTS ============
    match /guests/{guestUid} {
      function isGuest() {
        return loggedIn() && request.auth.uid == guestUid;
      }

      allow read: if isGuest();
      allow create: if isGuest() && request.resource.data.get('userType', 'nullType') == 'guest';
      allow update: if isGuest() && keysNotUpdated(['userType']);
      allow delete: if false;

      match /runs/{runId} {
        allow read: if false;
        allow create, update: if isGuest();
        allow delete: if false;

        match /trials/{trialId} {
          allow read: if false;
          allow create, update: if isGuest();
          allow delete: if false;
        }
      }
    }

    // ============ TASKS ============
    match /tasks/{taskId} {
      function canUpdateTask() {
        let newParams = request.resource.data.get("params", {});
        let oldParams = resource.data.get("params", {});
        return loggedIn()
          && keysNotUpdated(['registered'])
          && onlyTheseKeysUpdated(['description', 'lastUpdated', 'params', "createdAt", "updatedAt"])
          && newParams.diff(oldParams).addedKeys().size() == 0
          && newParams.diff(oldParams).removedKeys().size() == 0;
      }

      function canReadTask() {
        return shouldUseNewPermissions() ?
          (loggedIn() && hasPermission('tasks', 'read')) :
          loggedIn();
      }

      function canCreateTask() {
        let baseCheck = loggedIn() && !request.resource.data.keys().hasAny(['registered']);

        return shouldUseNewPermissions() ?
          (baseCheck && hasPermission('tasks', 'create')) :
          baseCheck;
      }

      function canUpdateTaskWithPermission() {
        return shouldUseNewPermissions() ?
          (canUpdateTask() && hasPermission('tasks', 'update')) :
          canUpdateTask();
      }

      function canDeleteTask() {
        return shouldUseNewPermissions() ?
          hasPermission('tasks', 'delete') :
          false;
      }

      allow read: if canReadTask();
      allow create: if canCreateTask();
      allow update: if canUpdateTaskWithPermission();
      allow delete: if canDeleteTask();

      match /variants/{variantId} {
        allow read: if canReadTask();
        allow create: if canCreateTask();
        allow update: if canUpdateTaskWithPermission();
        allow delete: if canDeleteTask();
      }
    }
  }
}
